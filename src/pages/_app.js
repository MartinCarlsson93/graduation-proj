import Head from "next/head";
import "@/styles/globals.css";
import Header from "../../src/components/Header";
import Footer from "../../src/components/Footer";
import { useState, useEffect, createContext } from "react";
import { FavouriteProvider } from "../components/context/favouriteContext";
import { CartProvider } from "../components/context/cartProvider";

import { Rubik } from "next/font/google";

import { storyblokInit, apiPlugin, StoryblokComponent } from "@storyblok/react";

const rubik = Rubik({ subsets: ["latin"] });

export default function App({ Component, pageProps }) {
  const [loggedIn, setLoggedIn] = useState(false);
  const [loggedInUser, setLoggedInUser] = useState("");

  storyblokInit({
    accessToken: process.env.STORYBLOCK_API_URL,
    use: [apiPlugin],
  });

  const logIn = () => setLoggedIn(true);
  const logOut = () => setLoggedIn(false);
  return (
    <>
      <Head>
        <title>JAM Shopper</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="./favicon.ico" />
      </Head>

      <main className={rubik.className}>
        <Header />
        <FavouriteProvider>
          <CartProvider>
            <Component
              {...pageProps}
              loggedIn={loggedIn}
              logIn={logIn}
              logOut={logOut}
              setLoginUser={setLoggedInUser}
              loginUser={loggedInUser}
            />
          </CartProvider>
        </FavouriteProvider>
        <Footer />
      </main>
    </>
  );
}

export async function getStaticProps() {
  // home is the default slug for the homepage in Storyblok
  let slug = "home";

  // load the draft version
  let sbParams = {
    version: "draft", // or 'published'
  };

  const storyblokApi = getStoryblokApi();
  let { data } = await storyblokApi.get(`cdn/stories/${slug}`, sbParams);

  return {
    props: {
      story: data ? data.story : false,
      key: data ? data.story.id : false,
    },
    revalidate: 3600, // revalidate every hour
  };
}
